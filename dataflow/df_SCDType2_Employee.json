{
	"name": "df_SCDType2_Employee",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_employee",
						"type": "DatasetReference"
					},
					"name": "srcEmployee"
				},
				{
					"dataset": {
						"referenceName": "ds_AZsql_Employee",
						"type": "DatasetReference"
					},
					"name": "sqlEmployee"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_AZsql_Employee",
						"type": "DatasetReference"
					},
					"name": "sinkExpireUpdates"
				},
				{
					"dataset": {
						"referenceName": "ds_AZsql_Employee",
						"type": "DatasetReference"
					},
					"name": "sinkSQLTargetDeleted"
				},
				{
					"dataset": {
						"referenceName": "ds_AZsql_Employee",
						"type": "DatasetReference"
					},
					"name": "SinkSQLTargetInsert"
				}
			],
			"transformations": [
				{
					"name": "selectFromSource"
				},
				{
					"name": "selectfromTarget"
				},
				{
					"name": "ExcludeRecordsNoChange"
				},
				{
					"name": "lkpFindUpdatedRecords"
				},
				{
					"name": "drUpdateDefaultColumns"
				},
				{
					"name": "ARForUpdateRecords"
				},
				{
					"name": "jnNotExistsinTarget"
				},
				{
					"name": "filterToBeDeleted"
				},
				{
					"name": "drDefaultColumnsDeleted"
				},
				{
					"name": "arDeleted"
				},
				{
					"name": "CreateDefaultInsertColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmpId as integer,",
				"          Name as string,",
				"          City as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> srcEmployee",
				"source(output(",
				"          SurrGateKey as integer,",
				"          Name as string,",
				"          City as string,",
				"          IsActive as boolean,",
				"          FromDate as timestamp,",
				"          EndDate as timestamp,",
				"          EmpId as integer,",
				"          IsDeleted as boolean",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sqlEmployee",
				"srcEmployee select(mapColumn(",
				"          each(match(true()),",
				"               'src_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFromSource",
				"sqlEmployee select(mapColumn(",
				"          each(match(true()),",
				"               'sql_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectfromTarget",
				"selectFromSource, selectfromTarget exists(src_EmpId==sql_EmpId && src_Name==sql_Name && src_City==sql_City && sql_IsActive==true() && sql_IsDeleted==false(),",
				"     negate:true,",
				"     broadcast: 'both')~> ExcludeRecordsNoChange",
				"ExcludeRecordsNoChange, selectfromTarget lookup(src_EmpId == sql_EmpId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpFindUpdatedRecords",
				"lkpFindUpdatedRecords derive(Src_IsActive = false(),",
				"          Src_EndDate = currentDate()) ~> drUpdateDefaultColumns",
				"drUpdateDefaultColumns alterRow(updateIf(!isNull(sql_EmpId)&&!isNull(src_EmpId))) ~> ARForUpdateRecords",
				"selectfromTarget, selectFromSource join(sql_EmpId == src_EmpId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> jnNotExistsinTarget",
				"jnNotExistsinTarget filter(isNull(src_EmpId) && !isNull(sql_EmpId)) ~> filterToBeDeleted",
				"filterToBeDeleted derive(SrcIsDeleted = true(),",
				"          SrcEndDate = currentDate()) ~> drDefaultColumnsDeleted",
				"drDefaultColumnsDeleted alterRow(updateIf(1==1)) ~> arDeleted",
				"ExcludeRecordsNoChange derive(Insert_IsActive = true(),",
				"          Insert_IsDeleted = false(),",
				"          Insert_FromDate = currentDate(),",
				"          Insert_EndDate = toDate('9999-01-01', 'yyyy-MM-dd')) ~> CreateDefaultInsertColumns",
				"ARForUpdateRecords sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          SurrGateKey as integer,",
				"          Name as string,",
				"          City as string,",
				"          IsActive as boolean,",
				"          FromDate as timestamp,",
				"          EndDate as timestamp,",
				"          EmpId as integer,",
				"          IsDeleted as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['SurrGateKey'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SurrGateKey = sql_SurrGateKey,",
				"          Name = sql_Name,",
				"          City = sql_City,",
				"          IsActive = Src_IsActive,",
				"          FromDate = sql_FromDate,",
				"          EndDate = Src_EndDate,",
				"          EmpId = sql_EmpId,",
				"          IsDeleted = sql_IsDeleted",
				"     )) ~> sinkExpireUpdates",
				"arDeleted sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          SurrGateKey as integer,",
				"          Name as string,",
				"          City as string,",
				"          IsActive as boolean,",
				"          FromDate as timestamp,",
				"          EndDate as timestamp,",
				"          EmpId as integer,",
				"          IsDeleted as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['SurrGateKey'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SurrGateKey = sql_SurrGateKey,",
				"          Name = sql_Name,",
				"          City = sql_City,",
				"          IsActive = sql_IsActive,",
				"          FromDate = sql_FromDate,",
				"          EndDate = SrcEndDate,",
				"          EmpId = sql_EmpId,",
				"          IsDeleted = SrcIsDeleted",
				"     )) ~> sinkSQLTargetDeleted",
				"CreateDefaultInsertColumns sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          SurrGateKey as integer,",
				"          Name as string,",
				"          City as string,",
				"          IsActive as boolean,",
				"          FromDate as timestamp,",
				"          EndDate as timestamp,",
				"          EmpId as integer,",
				"          IsDeleted as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Name = src_Name,",
				"          City = src_City,",
				"          IsActive = Insert_IsActive,",
				"          FromDate = Insert_FromDate,",
				"          EndDate = Insert_EndDate,",
				"          EmpId = src_EmpId,",
				"          IsDeleted = Insert_IsDeleted",
				"     )) ~> SinkSQLTargetInsert"
			]
		}
	}
}