{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "covidreportingadf-vipul"
		},
		"ls_SQL_cases_and_deaths_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_SQL_cases_and_deaths'"
		},
		"ls_ablob_covidreportingsavipul_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_ablob_covidreportingsavipul'"
		},
		"ls_alake_covidreportingdlvipul_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_alake_covidreportingdlvipul'"
		},
		"ls_AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().KV_BaseURL}"
		},
		"ls_alake_covidreportingdlvipul_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://covidreportingdlvipul.dfs.core.windows.net/"
		},
		"ls_blobsecond_vipul_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "Secretcovidreportingsavipul"
		},
		"ls_http_opendata_ecdc_europa_eu_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().sourceBaseURL}"
		},
		"tr_ingest_Population_Data_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/0cbb15ba-89f8-43c5-8772-a6714c8b286b/resourceGroups/covidreporting-rg(vipul)/providers/Microsoft.Storage/storageAccounts/covidreportingsavipul"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Ingest_Polulation_Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check if file exists",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_population_raw_gz",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "00.00:01:00",
							"sleep": 10,
							"minimumSize": 1024
						}
					},
					{
						"name": "Get File Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Check if file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_population_raw_gz",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"size",
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Column Counts matches",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get File Metadata').output.columnCount,13),\nequals(activity('Get File Metadata').output.exists,true))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send email",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://file_incompatible",
										"method": "POST",
										"headers": {},
										"body": "Dummy"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy Population data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "00.00:05:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_population_raw_gz",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_population_raw_tsv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete Source File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Population data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_population_raw_gz",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "ls_ablob_covidreportingsavipul",
												"type": "LinkedServiceReference"
											},
											"path": "population"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-25T16:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_population_raw_gz')]",
				"[concat(variables('factoryId'), '/datasets/ds_population_raw_tsv')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_covidreportingsavipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Ingest_ecdc_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup ECDC Files",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_ECDC_File_List",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Execute Each FIle",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup ECDC Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup ECDC Files').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy ECDC data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_ecdc_raw_csv_http",
											"type": "DatasetReference",
											"parameters": {
												"relativeURL": {
													"value": "@item().sourceRelativeURL",
													"type": "Expression"
												},
												"sourceBaseURL": {
													"value": "@item().sourceBaseURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ecdc_raw_csv_dl",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().sinkFileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-25T16:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ECDC_File_List')]",
				"[concat(variables('factoryId'), '/datasets/ds_ecdc_raw_csv_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_ecdc_raw_csv_dl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Process_Hospital_Admissions_Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_hospitalAdmissions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_hospital_admissions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HospitalDataAdmissionSource": {},
									"countrysource": {},
									"dimDateSource": {},
									"sinkWeekly": {},
									"sinkDaily": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "processed"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-25T16:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_hospital_admissions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SQLize_cases_and_deaths')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy cases and deaths",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Truncate table covid_reporting.cases_and_deaths;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "country_code_2_digit",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "country_code_3_digit",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "population",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "cases_count",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "deaths_count",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "reported_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "source",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_Processed_cases_and_deaths",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_SQL_cases_and_deaths",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SQLize"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-25T16:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Processed_cases_and_deaths')]",
				"[concat(variables('factoryId'), '/datasets/ds_SQL_cases_and_deaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataflow_SCDType2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_SCDType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SCDType2_Employee",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcEmployee": {},
									"sqlEmployee": {},
									"sinkExpireUpdates": {},
									"sinkSQLTargetDeleted": {},
									"SinkSQLTargetInsert": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-04T13:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SCDType2_Employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_cases_and_deaths_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_cases_deaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_cases_deaths",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CasesandDeathSource": {},
									"countryLookup": {},
									"CasesandDeathSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "processed"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-25T16:02:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_cases_deaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_AZsql_Employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_SQL_cases_and_deaths",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SurrGateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "FromDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EmpId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsDeleted",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SQL_cases_and_deaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ECDC_File_List')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_covidreportingsavipul",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ecdc_file_list.json",
						"container": "configs"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"sourceBaseURL": {
							"type": "string"
						},
						"sourceRelativeURL": {
							"type": "string"
						},
						"sinkFileName": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_covidreportingsavipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Processed_Hospital_Admissions_Daily')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_alake_covidreportingdlvipul",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ecdc/Hospital_Admissions_Daily",
						"fileSystem": "processed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_alake_covidreportingdlvipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Processed_Hospitals_Admissions_Weekly')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_alake_covidreportingdlvipul",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ecdc/Hospital_Adminissions_Weekly",
						"fileSystem": "processed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_alake_covidreportingdlvipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Processed_cases_and_deaths')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_alake_covidreportingdlvipul",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ecdc/cases_deaths",
						"fileSystem": "processed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_alake_covidreportingdlvipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SQL_cases_and_deaths')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_SQL_cases_and_deaths",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "covid_reporting",
					"table": "cases_and_deaths"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SQL_cases_and_deaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_country_Lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_alake_covidreportingdlvipul",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "country_lookup.csv",
						"fileSystem": "lookup"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "country_code_2_digit",
						"type": "String"
					},
					{
						"name": "country_code_3_digit",
						"type": "String"
					},
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_alake_covidreportingdlvipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dim_date_Lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_alake_covidreportingdlvipul",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_date.csv",
						"fileSystem": "lookup"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "date_key",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "month",
						"type": "String"
					},
					{
						"name": "day",
						"type": "String"
					},
					{
						"name": "day_name",
						"type": "String"
					},
					{
						"name": "day_of_year",
						"type": "String"
					},
					{
						"name": "week_of_month",
						"type": "String"
					},
					{
						"name": "week_of_year",
						"type": "String"
					},
					{
						"name": "month_name",
						"type": "String"
					},
					{
						"name": "year_month",
						"type": "String"
					},
					{
						"name": "year_week",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_alake_covidreportingdlvipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ecdc_raw_csv_dl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_alake_covidreportingdlvipul",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "ecdc",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_alake_covidreportingdlvipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ecdc_raw_csv_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_http_opendata_ecdc_europa_eu",
					"type": "LinkedServiceReference",
					"parameters": {
						"sourceBaseURL": {
							"value": "@dataset().sourceBaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"relativeURL": {
						"type": "string"
					},
					"sourceBaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().relativeURL",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_http_opendata_ecdc_europa_eu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blobsecond_vipul",
					"type": "LinkedServiceReference",
					"parameters": {
						"AzureKVBaseURL": "https://keyvaultcovidvipul.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee.txt",
						"container": "employeescdtype2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpId",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blobsecond_vipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_population_raw_gz')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_covidreportingsavipul",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "population_by_age.tsv.gz",
						"container": "population"
					},
					"columnDelimiter": "\t",
					"compressionCodec": "gzip",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_covidreportingsavipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_population_raw_tsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_alake_covidreportingdlvipul",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "population_byage.tsv",
						"folderPath": "Population",
						"fileSystem": "raw"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_alake_covidreportingdlvipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_cases_and_deaths')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_alake_covidreportingdlvipul",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cases_deaths.csv",
						"folderPath": "ecdc/cases_deaths",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "country_code",
						"type": "String"
					},
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					},
					{
						"name": "indicator",
						"type": "String"
					},
					{
						"name": "daily_count",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "rate_14_day",
						"type": "String"
					},
					{
						"name": "source",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_alake_covidreportingdlvipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_hospital_Admissions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_alake_covidreportingdlvipul",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "hospital_admissions.csv",
						"folderPath": "ecdc/hospital_admissions",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "indicator",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "year_week",
						"type": "String"
					},
					{
						"name": "value",
						"type": "String"
					},
					{
						"name": "source",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_alake_covidreportingdlvipul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the linked service for the Azure Key Vault",
				"parameters": {
					"KV_BaseURL": {
						"type": "string",
						"defaultValue": "https://keyvaultcovidvipul.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SQL_cases_and_deaths')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_SQL_cases_and_deaths_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ablob_covidreportingsavipul')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_ablob_covidreportingsavipul_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_alake_covidreportingdlvipul')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_alake_covidreportingdlvipul_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_alake_covidreportingdlvipul_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blobsecond_vipul')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This blog has been created by vipul to understand the SCD Type 2 in ADF",
				"parameters": {
					"AzureKVBaseURL": {
						"type": "string",
						"defaultValue": "https://keyvaultcovidvipul.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_AzureKeyVault",
							"type": "LinkedServiceReference",
							"parameters": {
								"KV_BaseURL": {
									"value": "@linkedService().AzureKVBaseURL",
									"type": "Expression"
								}
							}
						},
						"secretName": "[parameters('ls_blobsecond_vipul_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_http_opendata_ecdc_europa_eu')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"sourceBaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_http_opendata_ecdc_europa_eu_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_Population_Data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_Ingest_Polulation_Data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/population/blobs/population_by_age.tsv.gz",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_ingest_Population_Data_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Ingest_Polulation_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_hospital_admissions_data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_Ingest_ecdc_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-07-16T19:52:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								29
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Ingest_ecdc_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCDType2_Employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_employee",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						},
						{
							"dataset": {
								"referenceName": "ds_AZsql_Employee",
								"type": "DatasetReference"
							},
							"name": "sqlEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_AZsql_Employee",
								"type": "DatasetReference"
							},
							"name": "sinkExpireUpdates"
						},
						{
							"dataset": {
								"referenceName": "ds_AZsql_Employee",
								"type": "DatasetReference"
							},
							"name": "sinkSQLTargetDeleted"
						},
						{
							"dataset": {
								"referenceName": "ds_AZsql_Employee",
								"type": "DatasetReference"
							},
							"name": "SinkSQLTargetInsert"
						}
					],
					"transformations": [
						{
							"name": "selectFromSource"
						},
						{
							"name": "selectfromTarget"
						},
						{
							"name": "ExcludeRecordsNoChange"
						},
						{
							"name": "lkpFindUpdatedRecords"
						},
						{
							"name": "drUpdateDefaultColumns"
						},
						{
							"name": "ARForUpdateRecords"
						},
						{
							"name": "jnNotExistsinTarget"
						},
						{
							"name": "filterToBeDeleted"
						},
						{
							"name": "drDefaultColumnsDeleted"
						},
						{
							"name": "arDeleted"
						},
						{
							"name": "CreateDefaultInsertColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as integer,",
						"          Name as string,",
						"          City as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcEmployee",
						"source(output(",
						"          SurrGateKey as integer,",
						"          Name as string,",
						"          City as string,",
						"          IsActive as boolean,",
						"          FromDate as timestamp,",
						"          EndDate as timestamp,",
						"          EmpId as integer,",
						"          IsDeleted as boolean",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sqlEmployee",
						"srcEmployee select(mapColumn(",
						"          each(match(true()),",
						"               'src_'+$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFromSource",
						"sqlEmployee select(mapColumn(",
						"          each(match(true()),",
						"               'sql_'+$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectfromTarget",
						"selectFromSource, selectfromTarget exists(src_EmpId==sql_EmpId && src_Name==sql_Name && src_City==sql_City && sql_IsActive==true() && sql_IsDeleted==false(),",
						"     negate:true,",
						"     broadcast: 'both')~> ExcludeRecordsNoChange",
						"ExcludeRecordsNoChange, selectfromTarget lookup(src_EmpId == sql_EmpId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpFindUpdatedRecords",
						"lkpFindUpdatedRecords derive(Src_IsActive = false(),",
						"          Src_EndDate = currentDate()) ~> drUpdateDefaultColumns",
						"drUpdateDefaultColumns alterRow(updateIf(!isNull(sql_EmpId)&&!isNull(src_EmpId))) ~> ARForUpdateRecords",
						"selectfromTarget, selectFromSource join(sql_EmpId == src_EmpId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jnNotExistsinTarget",
						"jnNotExistsinTarget filter(isNull(src_EmpId) && !isNull(sql_EmpId)) ~> filterToBeDeleted",
						"filterToBeDeleted derive(SrcIsDeleted = true(),",
						"          SrcEndDate = currentDate()) ~> drDefaultColumnsDeleted",
						"drDefaultColumnsDeleted alterRow(updateIf(1==1)) ~> arDeleted",
						"ExcludeRecordsNoChange derive(Insert_IsActive = true(),",
						"          Insert_IsDeleted = false(),",
						"          Insert_FromDate = currentDate(),",
						"          Insert_EndDate = toDate('9999-01-01', 'yyyy-MM-dd')) ~> CreateDefaultInsertColumns",
						"ARForUpdateRecords sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          SurrGateKey as integer,",
						"          Name as string,",
						"          City as string,",
						"          IsActive as boolean,",
						"          FromDate as timestamp,",
						"          EndDate as timestamp,",
						"          EmpId as integer,",
						"          IsDeleted as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['SurrGateKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SurrGateKey = sql_SurrGateKey,",
						"          Name = sql_Name,",
						"          City = sql_City,",
						"          IsActive = Src_IsActive,",
						"          FromDate = sql_FromDate,",
						"          EndDate = Src_EndDate,",
						"          EmpId = sql_EmpId,",
						"          IsDeleted = sql_IsDeleted",
						"     )) ~> sinkExpireUpdates",
						"arDeleted sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          SurrGateKey as integer,",
						"          Name as string,",
						"          City as string,",
						"          IsActive as boolean,",
						"          FromDate as timestamp,",
						"          EndDate as timestamp,",
						"          EmpId as integer,",
						"          IsDeleted as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['SurrGateKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SurrGateKey = sql_SurrGateKey,",
						"          Name = sql_Name,",
						"          City = sql_City,",
						"          IsActive = sql_IsActive,",
						"          FromDate = sql_FromDate,",
						"          EndDate = SrcEndDate,",
						"          EmpId = sql_EmpId,",
						"          IsDeleted = SrcIsDeleted",
						"     )) ~> sinkSQLTargetDeleted",
						"CreateDefaultInsertColumns sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          SurrGateKey as integer,",
						"          Name as string,",
						"          City as string,",
						"          IsActive as boolean,",
						"          FromDate as timestamp,",
						"          EndDate as timestamp,",
						"          EmpId as integer,",
						"          IsDeleted as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Name = src_Name,",
						"          City = src_City,",
						"          IsActive = Insert_IsActive,",
						"          FromDate = Insert_FromDate,",
						"          EndDate = Insert_EndDate,",
						"          EmpId = src_EmpId,",
						"          IsDeleted = Insert_IsDeleted",
						"     )) ~> SinkSQLTargetInsert"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_employee')]",
				"[concat(variables('factoryId'), '/datasets/ds_AZsql_Employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_employee_SCDType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_employee",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						},
						{
							"dataset": {
								"referenceName": "ds_AZsql_Employee",
								"type": "DatasetReference"
							},
							"name": "SQLEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_AZsql_Employee",
								"type": "DatasetReference"
							},
							"name": "sinkSQL"
						},
						{
							"dataset": {
								"referenceName": "ds_AZsql_Employee",
								"type": "DatasetReference"
							},
							"name": "sinkInsertSQL"
						},
						{
							"dataset": {
								"referenceName": "ds_AZsql_Employee",
								"type": "DatasetReference"
							},
							"name": "sinkExpireOld"
						}
					],
					"transformations": [
						{
							"name": "selectSrcColumns"
						},
						{
							"name": "selectSQLColumns"
						},
						{
							"name": "JoinIdentifyDelete"
						},
						{
							"name": "filterToBeDeleted"
						},
						{
							"name": "derivedColumn"
						},
						{
							"name": "AlterRow"
						},
						{
							"name": "lookupIdentifyInsertUpdate"
						},
						{
							"name": "Conditionalsplit"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "ExpireCurrentActive"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "AlterRowUpdateExpire"
						},
						{
							"name": "SkipExistingRecords"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as integer,",
						"          Name as string,",
						"          City as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcEmployee",
						"source(output(",
						"          SurrGateKey as integer,",
						"          Name as string,",
						"          City as string,",
						"          IsActive as boolean,",
						"          FromDate as timestamp,",
						"          EndDate as timestamp,",
						"          EmpId as integer,",
						"          IsDeleted as boolean",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SQLEmployee",
						"srcEmployee select(mapColumn(",
						"          each(match(true()),",
						"               'src_'+$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSrcColumns",
						"SQLEmployee select(mapColumn(",
						"          each(match(true()),",
						"               'sql_'+$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSQLColumns",
						"selectSrcColumns, selectSQLColumns join(src_EmpId == sql_EmpId,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifyDelete",
						"JoinIdentifyDelete filter(isNull(src_EmpId) && !isNull(sql_EmpId)) ~> filterToBeDeleted",
						"filterToBeDeleted derive(SrcIsDeleted = 1,",
						"          SrcEndDate = currentDate()) ~> derivedColumn",
						"derivedColumn alterRow(updateIf(1==1)) ~> AlterRow",
						"SkipExistingRecords, selectSQLColumns lookup(src_EmpId == sql_EmpId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupIdentifyInsertUpdate",
						"lookupIdentifyInsertUpdate split(!isNull(src_EmpId) && isNull(sql_EmpId),",
						"     !isNull(src_EmpId) && !isNull(sql_EmpId),",
						"     disjoint: false) ~> Conditionalsplit@(InsertOperation, UpdateOperation, Other)",
						"Conditionalsplit@InsertOperation derive(SrcIsActive = 1,",
						"          SrcIsDeleted = 0,",
						"          SrcFromDate = currentDate(),",
						"          SrcEndDate = toDate('9999-01-01', 'yyyy-MM-dd')) ~> derivedColumn1",
						"Conditionalsplit@UpdateOperation, selectSQLColumns exists((src_EmpId==selectSQLColumns@sql_EmpId) && (src_Name!=selectSQLColumns@sql_Name || src_City!=selectSQLColumns@sql_City) && selectSQLColumns@sql_IsActive==true() && selectSQLColumns@sql_IsDeleted==false(),",
						"     negate:false,",
						"     broadcast: 'auto')~> ExpireCurrentActive",
						"ExpireCurrentActive derive(IsActive = false(),",
						"          EndDate = currentDate()) ~> derivedColumn2",
						"derivedColumn2 alterRow(upsertIf(1==1)) ~> AlterRowUpdateExpire",
						"selectSrcColumns, selectSQLColumns exists((src_EmpId==sql_EmpId) && (src_Name!=sql_Name || src_City!=sql_City) && sql_IsActive==true() && sql_IsDeleted==false(),",
						"     negate:false,",
						"     broadcast: 'both')~> SkipExistingRecords",
						"AlterRow sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          SurrGateKey as integer,",
						"          Name as string,",
						"          City as string,",
						"          IsActive as boolean,",
						"          FromDate as timestamp,",
						"          EndDate as timestamp,",
						"          EmpId as integer,",
						"          IsDeleted as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['SurrGateKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SurrGateKey = sql_SurrGateKey,",
						"          Name = sql_Name,",
						"          City = sql_City,",
						"          IsActive = sql_IsActive,",
						"          FromDate = sql_FromDate,",
						"          EndDate = SrcEndDate,",
						"          EmpId = sql_EmpId,",
						"          IsDeleted = SrcIsDeleted",
						"     )) ~> sinkSQL",
						"derivedColumn1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          SurrGateKey as integer,",
						"          Name as string,",
						"          City as string,",
						"          IsActive as boolean,",
						"          FromDate as timestamp,",
						"          EndDate as timestamp,",
						"          EmpId as integer,",
						"          IsDeleted as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Name = src_Name,",
						"          City = src_City,",
						"          IsActive = SrcIsActive,",
						"          FromDate = SrcFromDate,",
						"          EndDate = SrcEndDate,",
						"          EmpId = src_EmpId,",
						"          IsDeleted = SrcIsDeleted",
						"     )) ~> sinkInsertSQL",
						"AlterRowUpdateExpire sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          SurrGateKey as integer,",
						"          Name as string,",
						"          City as string,",
						"          IsActive as boolean,",
						"          FromDate as timestamp,",
						"          EndDate as timestamp,",
						"          EmpId as integer,",
						"          IsDeleted as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['SurrGateKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Name = sql_Name,",
						"          City = sql_City,",
						"          IsActive,",
						"          FromDate = sql_FromDate,",
						"          EndDate,",
						"          EmpId = sql_EmpId,",
						"          IsDeleted = sql_IsDeleted,",
						"          SurrGateKey = sql_SurrGateKey",
						"     )) ~> sinkExpireOld"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_employee')]",
				"[concat(variables('factoryId'), '/datasets/ds_AZsql_Employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_cases_deaths')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_cases_and_deaths",
								"type": "DatasetReference"
							},
							"name": "CasesandDeathSource"
						},
						{
							"dataset": {
								"referenceName": "ds_country_Lookup",
								"type": "DatasetReference"
							},
							"name": "countryLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Processed_cases_and_deaths",
								"type": "DatasetReference"
							},
							"name": "CasesandDeathSink"
						}
					],
					"transformations": [
						{
							"name": "filterEuropeOnly"
						},
						{
							"name": "selectOnlyRequiredFields"
						},
						{
							"name": "pivotcounts"
						},
						{
							"name": "lookupCountry"
						},
						{
							"name": "selectforsink"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as integer,",
						"          date as date,",
						"          rate_14_day as double,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CasesandDeathSource",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> countryLookup",
						"CasesandDeathSource filter(continent==\"Europe\" && not(isNull(country_code))) ~> filterEuropeOnly",
						"filterEuropeOnly select(mapColumn(",
						"          country,",
						"          country_code,",
						"          population,",
						"          indicator,",
						"          daily_count,",
						"          source,",
						"          each(match(name=='date'),",
						"               'reported'+'_date' = $$)",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: true) ~> selectOnlyRequiredFields",
						"selectOnlyRequiredFields pivot(groupBy(country,",
						"          country_code,",
						"          population,",
						"          source,",
						"          reported_date),",
						"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
						"     count = sum(daily_count),",
						"     columnNaming: '$V-$N',",
						"     lateral: true) ~> pivotcounts",
						"pivotcounts, countryLookup lookup(pivotcounts@country == countryLookup@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupCountry",
						"lookupCountry select(mapColumn(",
						"          country = pivotcounts@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population = pivotcounts@population,",
						"          {cases-count} = {confirmed cases-count},",
						"          {deaths-count},",
						"          reported_date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectforsink",
						"selectforsink sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['cases_and_death.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CasesandDeathSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_cases_and_deaths')]",
				"[concat(variables('factoryId'), '/datasets/ds_country_Lookup')]",
				"[concat(variables('factoryId'), '/datasets/ds_Processed_cases_and_deaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_hospital_Admissions",
								"type": "DatasetReference"
							},
							"name": "HospitalDataAdmissionSource"
						},
						{
							"dataset": {
								"referenceName": "ds_country_Lookup",
								"type": "DatasetReference"
							},
							"name": "countrysource"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_date_Lookup",
								"type": "DatasetReference"
							},
							"name": "dimDateSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Processed_Hospitals_Admissions_Weekly",
								"type": "DatasetReference"
							},
							"name": "sinkWeekly"
						},
						{
							"dataset": {
								"referenceName": "ds_Processed_Hospital_Admissions_Daily",
								"type": "DatasetReference"
							},
							"name": "sinkDaily"
						}
					],
					"transformations": [
						{
							"name": "selectrequiredfields"
						},
						{
							"name": "lookupcountry"
						},
						{
							"name": "selectRequiredField2"
						},
						{
							"name": "splitdailyfromweekly"
						},
						{
							"name": "AggdimDate"
						},
						{
							"name": "joinwithDate"
						},
						{
							"name": "pivotWeekly"
						},
						{
							"name": "pivotDaily"
						},
						{
							"name": "sortDaily"
						},
						{
							"name": "sortWeekly"
						},
						{
							"name": "selectWeekly"
						},
						{
							"name": "selectDaily"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HospitalDataAdmissionSource",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> countrysource",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dimDateSource",
						"HospitalDataAdmissionSource select(mapColumn(",
						"          country,",
						"          indicator,",
						"          reported_date = date,",
						"          reported_year_week = year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectrequiredfields",
						"selectrequiredfields, countrysource lookup(selectrequiredfields@country == countrysource@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupcountry",
						"lookupcountry select(mapColumn(",
						"          country = selectrequiredfields@country,",
						"          indicator,",
						"          reported_date,",
						"          reported_year_week,",
						"          value,",
						"          source,",
						"          country = countrysource@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRequiredField2",
						"selectRequiredField2 split(indicator=='Weekly new hospital admissions per 100k' || indicator=='Weekly new ICU admissions per 100k',",
						"     indicator=='Daily hospital occupancy' || indicator=='Daily ICU occupancy',",
						"     disjoint: false) ~> splitdailyfromweekly@(weekly, daily)",
						"dimDateSource aggregate(groupBy(ecdc_year_week = year+'-W'+lpad(week_of_year,2,'0')),",
						"     Week_Start_Date = min(date),",
						"          Week_End_Date = max(date)) ~> AggdimDate",
						"splitdailyfromweekly@weekly, AggdimDate join(reported_year_week == ecdc_year_week,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinwithDate",
						"joinwithDate pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          source,",
						"          Week_Start_Date,",
						"          Week_End_Date),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
						"     Count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> pivotWeekly",
						"splitdailyfromweekly@daily pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          source),",
						"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> pivotDaily",
						"pivotDaily sort(desc(reported_date, true),",
						"     asc(country, true)) ~> sortDaily",
						"pivotWeekly sort(desc(reported_year_week, true),",
						"     asc(country, true)) ~> sortWeekly",
						"sortWeekly select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          Week_Start_Date,",
						"          Week_End_Date,",
						"          {New hospital Occupany Count} = {Weekly new hospital admissions per 100k_Count},",
						"          {New ICU Occupany Count} = {Weekly new ICU admissions per 100k_Count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWeekly",
						"sortDaily select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          {Hospital occupancy_count} = {Daily hospital occupancy_count},",
						"          {ICU occupancy_count} = {Daily ICU occupancy_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDaily",
						"selectWeekly sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Hospital_Admissions_Weekly.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkWeekly",
						"selectDaily sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['HospitalAdmissionsDaily.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkDaily"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_hospital_Admissions')]",
				"[concat(variables('factoryId'), '/datasets/ds_country_Lookup')]",
				"[concat(variables('factoryId'), '/datasets/ds_dim_date_Lookup')]",
				"[concat(variables('factoryId'), '/datasets/ds_Processed_Hospitals_Admissions_Weekly')]",
				"[concat(variables('factoryId'), '/datasets/ds_Processed_Hospital_Admissions_Daily')]"
			]
		}
	]
}